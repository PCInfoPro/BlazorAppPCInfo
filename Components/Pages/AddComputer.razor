@page "/add-computer"
@inject Blazored.Modal.Services.IModalService ModalService
@using System.Text.Json
@using System.Net.Http.Headers
@inject NavigationManager Navigation
@inject IStringLocalizer<BlazorAppPCInfo.AddComputer> Localizer
@inject IStringLocalizer<Resources> LocResources
@using Microsoft.AspNetCore.Components.Forms

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <h3 class="text-center mb-4">@Localizer["head"]</h3>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <p style="color: red">@errorMessage</p>
            }

            <EditForm Model="@newComputer" FormName="AddForm" OnValidSubmit="HandleValidSubmit" class="p-4 shadow-sm rounded" style="background-color: #f8f9fa;">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <!-- Nombre del ordenador -->
                <div class="mb-3">
                    <label for="Name" class="form-label">@Localizer["pcmodel"]</label>
                    <InputText id="Name" class="form-control" placeholder="@Localizer["pcname"]" @bind-Value="newComputer.Model" />
                </div>

                <!-- Marca -->
                <div class="mb-3">
                    <label for="Brand" class="form-label">@LocResources["brand"]</label>
                    <button type="button" class="btn btn-link" @onclick="OpenAddBrandModal"><i class="bi bi-plus"></i></button>
                    <div class="mt-2 d-flex align-items-center">
                        <select id="Brand" class="form-select" @bind="newComputer.BrandID">
                            <option value="">@Localizer["brandchoose"]</option>
                            @foreach (var brand in brands)
                            {
                                <option value="@brand.BrandID">@brand.Name</option>
                            }
                        </select>
                    </div>
                </div>

                <!-- Procesador -->
                <div class="mb-3">
                    <label for="Processor" class="form-label">@LocResources["processor"]</label>
                    <button type="button" class="btn btn-link" @onclick="OpenAddProcessorModal"><i class="bi bi-plus"></i></button>
                    <div class="mt-2 d-flex align-items-center">
                        <select id="Processor" class="form-select" @bind="newComputer.ProcessorID">
                            <option value="">@Localizer["processorchoose"]</option>
                            @foreach (var processor in processors)
                            {
                                <option value="@processor.ProcessorID">@processor.Brand - @processor.Model - @processor.Frequency MHz</option>
                            }
                        </select>
                    </div>
                </div>

                <!-- Grafica -->
                <div class="mb-3">
                    <label for="GraphicsCard" class="form-label">@LocResources["GraphicsCardModel"]</label>
                    <button type="button" class="btn btn-link" @onclick="OpenAddGraphicCardModal"><i class="bi bi-plus"></i></button>
                    <div class="mt-2 d-flex align-items-center">
                        <select id="Processor" class="form-select" @bind="newComputer.GraphicsCardID">
                            <option value="">@Localizer["graphiccardchoose"]</option>
                            @foreach (var graphicsCard in graphicsCards)
                            {
                                <option value="@graphicsCard.GraphicsCardID">@graphicsCard.Brand - @graphicsCard.Model - @graphicsCard.MemoryGB GB</option>
                            }
                        </select>
                    </div>
                </div>

                <!-- Memoria RAM -->
                <div class="mb-3">
                    <label for="RAM" class="form-label">@LocResources["ram"] (GB)</label>
                    <button type="button" class="btn btn-link" @onclick="OpenAddRAMModal"><i class="bi bi-plus"></i></button>
                    <div class="mt-2 d-flex align-items-center">
                        <select id="RAM" class="form-select" @bind="newComputer.RAMID">
                            <option value="">@Localizer["ramchoose"]</option>
                            @foreach (var ram in rams)
                            {
                                <option value="@ram.RAMID">@ram.Type - @ram.Frequency - @ram.CapacityGB GB</option>
                            }
                        </select>
                    </div>
                </div>

                <!-- Opción de almacenamiento: Ingreso manual o seleccionar disco -->
                <div class="mb-3">
                    <label class="form-label">@Localizer["storageoptions"]</label>
                    <button type="button" class="btn btn-link" @onclick="OpenAddHardDriveModal"><i class="bi bi-plus"></i></button>
                    <!-- Seleccionar si usar almacenamiento personalizado o existente -->
                    <div class="form-check">
                        <InputCheckbox id="UseCustomStorage" class="form-check-input" @bind-Value="UseCustomStorage" />
                        <label for="UseCustomStorage" class="form-check-label">@Localizer["choosecustomizestorage"]</label>
                    </div>

                    @if (UseCustomStorage)
                    {
                        <!-- Almacenamiento personalizado (manual) -->
                        <div class="mt-2">
                            <label for="StorageGB" class="form-label">@LocResources["memory"] (GB)</label>
                            <select id="StorageGB" class="form-select" @bind="newComputer.StorageGB">
                                <option value="">@Localizer["storagechoose"]</option>
                                @foreach (var storage in storageOptions)
                                {
                                    <option value="@storage">@storage GB</option>
                                }
                            </select>
                        </div>
                    }
                    else
                    {
                        <!-- Seleccionar disco duro existente -->
                        <div class="mt-2">
                            <label for="SelectedStorage" class="form-label">@Localizer["systemstorage"]</label>
                            <div class="mt-2 d-flex align-items-center">
                                <select id="SelectedStorage" class="form-select" @bind="newComputer.StorageID">
                                    <option value="">@Localizer["sddoptions"]</option>
                                    @foreach (var drive in hardDrives)
                                    {
                                        <option value="@drive.StorageID">@drive.Model - @drive.CapacityGB GB</option>
                                    }
                                </select>
                            </div>
                        </div>
                    }
                </div>

                <!-- Precio -->
                <div class="mb-3">
                    <label for="Price" class="form-label">@LocResources["price"] ($)</label>
                    <InputNumber id="Price" class="form-control" placeholder="@Localizer["placeholderprice"]" @bind-Value="newComputer.Price" />
                </div>

                @* <!-- URL de la imagen -->
                <div class="mb-3">
                    <label for="ImageUrl" class="form-label">@Localizer["urlimage"]</label>
                    <InputText id="ImageUrl" class="form-control" placeholder="@Localizer["placeholderurl"]" @bind-Value="newComputer.Model" />
                </div> *@

                <div class="mb-3">
                    <label for="image" class="form-label">Imagen</label>
                    <DropZone></DropZone>
                </div>

                <!-- Botón para guardar -->
                <div class="d-grid gap-2">
                    <button type="submit" class="btn btn-primary">@LocResources["save"] @LocResources["computer"]</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {

    private void HandleDrop(DragEventArgs e) 
    { 
        
        // Maneja el archivo arrastrado aquí 
    } 
    private void HandleDragOver(DragEventArgs e) 
    {

    }

    #region variables
    private static readonly Logger logger = LogManager.GetCurrentClassLogger();
    private Computer newComputer = new Computer();
    private List<int> storageOptions = new List<int>();
    private List<Storage> hardDrives = new List<Storage>();
    private List<Brand> brands = new List<Brand>();
    private List<Processor> processors = new List<Processor>();
    private List<RAM> rams = new List<RAM>();
    private List<GraphicsCard> graphicsCards = new List<GraphicsCard>();
    private string errorMessage;
    bool UseCustomStorage = false;
    private MultipartFormDataContent formFileImage = new();
    private long maxFileSize = 1024 * 15;
    private int maxAllowedFiles = 1;
    private bool isLoading;
    private string? fileName = null;
    private LoginUser user = new LoginUser 
    {
        Username = "admin",
        Password = "password"
    };
    #endregion

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Login en API
            @* await APIService.Login(user); *@
            
            // Cargar las opciones de la API
            @* await RefreshHardDrives();
            await RefreshRAMs();
            await RefreshProcessors();
            await RefreshBrands();
            await RefreshGraphicsCards(); *@
            storageOptions = new List<int> { 128, 256, 512, 1024, 2048 };
        }
        catch(Exception ex)
        {
            logger.Error(LocResources["loadError"] + ex.Message + ex.StackTrace);
        }
        
    }

    private async Task HandleValidSubmit()
    {
        // Almacenar el valor correcto según la elección del almacenamiento
        if (UseCustomStorage && newComputer.StorageGB.HasValue)
        {
            newComputer.StorageGB = newComputer.StorageGB.Value;
        }
        else if (!UseCustomStorage && newComputer.StorageID.HasValue)
        {
            var selectedDrive = hardDrives.FirstOrDefault(d => d.StorageID == newComputer.StorageID.Value);
            if (selectedDrive != null)
            {
                newComputer.StorageID = selectedDrive.StorageID;
            }
        }

        if (!string.IsNullOrEmpty(fileName))
            newComputer.ImageUrl = fileName;

        var response = await APIService.PostComputers(newComputer);
        if (response != null)
        {
            if (formFileImage != null)
                await BlobApiService.Postblob(formFileImage);
            Navigation.NavigateTo($"/computer/{response.ComputerID}");
        }
        else
        {
            errorMessage = Localizer["addError"];
            logger.Error(Localizer["addError"]);
        }
    }
    
    private async Task OpenAddBrandModal() =>
        await OpenModalAndRefresh<AddBrandForm>(@Localizer["titlemodalbrand"], RefreshBrands);

    private async Task OpenAddProcessorModal() =>
        await OpenModalAndRefresh<AddProcessorForm>(@Localizer["titlemodalprocessor"], RefreshProcessors);

    private async Task OpenAddRAMModal() =>
        await OpenModalAndRefresh<AddRAMForm>(@Localizer["titlemodalRAM"], RefreshRAMs);

    private async Task OpenAddHardDriveModal() =>
        await OpenModalAndRefresh<AddHardDriveForm>(@Localizer["titlemodalStorage"], RefreshHardDrives);

    private async Task OpenAddGraphicCardModal() =>
        await OpenModalAndRefresh<AddGraphicCardForm>(@Localizer["titlemodalStorage"], RefreshHardDrives);

    private async Task OpenModalAndRefresh<T>(string title, Func<Task> refreshMethod) where T : IComponent
    {
        var result = await ModalService.Show<T>(title).Result;

        if (!result.Cancelled)
        {
            await refreshMethod();
        }
    }

    private async Task RefreshBrands() => brands = await APIService.GetBrands();
    private async Task RefreshProcessors() => processors = await APIService.GetProcessors();
    private async Task RefreshRAMs() => rams = await APIService.GetRAMs();
    private async Task RefreshHardDrives() => hardDrives = await APIService.GetStorages();
    private async Task RefreshGraphicsCards() => graphicsCards = await APIService.GetGraphicsCards();


    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                if (file != null)
                {
                    using var stream = file.OpenReadStream();
                    using var memoryStream = new MemoryStream();
                    await stream.CopyToAsync(memoryStream);
                    var content = new ByteArrayContent(memoryStream.ToArray());
                    content.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

                    // Llamada al backend para cargar el archivo
                    formFileImage = new MultipartFormDataContent
                    {
                        { content, "file", file.Name }
                    };

                    fileName = file.Name;
                }
            }
            catch (Exception ex)
            {
                errorMessage = ex.Message;
            }
        }
    }
}
