@page "/searchcomputers"
@inject IStringLocalizer<BlazorAppPCInfo.SearchComputers> Localizer
@inject IStringLocalizer<Resources> LocResources

<h3>@Localizer["head"]</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <p style="color: red">@errorMessage</p>
}

<div class="filters-container">
    <div class="row mb-3">
        <div class="col-md-4">
            <input type="text" class="form-control" placeholder="@Localizer["searchByName"]" @bind="searchTerm" />
        </div>
        <div class="col-md-4">
            <select class="form-control" @bind="selectedProcessor">
                <option value="">@Localizer["filterProcessor"]</option>
                @foreach (var processor in processors)
                {
                    <option value="@processor.ProcessorID">@processor.Brand - @processor.Model - @processor.Frequency MHz</option>
                }
            </select>
        </div>
        <div class="col-md-4">
            <select class="form-control" @bind="selectedRAM">
                <option value="">@Localizer["filterRAM"]</option>
                @foreach (var ram in rams)
                {
                    <option value="@ram.RAMID">@ram.Frequency - @ram.Type - @ram.CapacityGB GB</option>
                }
            </select>
        </div>
    </div>
</div>


<!-- Lista de ordenadores filtrados -->
<div class="computer-list">
    @if (filteredComputers.Any())
    {
        <div class="computers-container">
            @foreach (var computer in filteredComputers)
            {
                <a href="/computer/@computer.ComputerID" class="computer-card">
                    <div class="image-wrapper">
                        <img src="@computer.Name" alt="Imagen de @computer.Name" class="computer-image" />
                    </div>
                    <h4>@computer.Name</h4>
                    <ul>
                        <li><i class="bi bi-cpu"></i> @LocResources["processor"]: @computer.Processor</li>
                        <li><i class="bi bi-memory"></i> @LocResources["ram"]: @computer.RAM</li>
                        <li><i class="bi bi-hdd"></i> @LocResources["memory"]: @computer.Storage</li>
                        <li><i class="bi bi-currency-dollar"></i> @LocResources["price"]: $@computer.Price</li>
                    </ul>
                </a>
            }
        </div>
    }
    else
    {
        <p>@Localizer["noSearchData"]</p>
    }
</div>

@code {
    private List<int> storageOptions = new List<int>();
    private List<ComputersSimpleDetail> computers = new List<ComputersSimpleDetail>();
    private List<Storage> hardDrives = new List<Storage>();
    private List<Brand> brands = new List<Brand>();
    private List<Processor> processors = new List<Processor>();
    private List<RAM> rams = new List<RAM>();
    // Campos de filtro
    private string searchTerm = string.Empty;
    private string selectedProcessor = string.Empty;
    private int? selectedRAM;
    private decimal? minPrice;
    private decimal? maxPrice;
    private string errorMessage;
    private LoginUser user = new LoginUser 
    {
        Username = "admin",
        Password = "password"
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await APIService.Login(user);
            try
            {
                // Cargar las opciones de la API
                await RefreshHardDrives();
                await RefreshRAMs();
                await RefreshProcessors();
                await RefreshBrands();
                computers = await APIService.GetComputersSimpleDetails();
            }
            catch (Exception ex)
            {
               errorMessage = LocResources["loadError"] + ex.Message + ex.StackTrace;
            }
        }
        catch (Exception ex)
        {
            errorMessage = LocResources["loginFail"];            
        }
    }


    // LÃ³gica de filtrado aplicada
    private IEnumerable<ComputersSimpleDetail> filteredComputers => computers.Where(c =>
        (string.IsNullOrWhiteSpace(searchTerm) || c.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) &&
        (string.IsNullOrWhiteSpace(selectedProcessor) || c.Processor.Contains(selectedProcessor, StringComparison.OrdinalIgnoreCase)) &&
        (!selectedRAM.HasValue || c.RAM.Equals(selectedRAM)) &&
        (!minPrice.HasValue || c.Price >= minPrice) &&
        (!maxPrice.HasValue || c.Price <= maxPrice));
    
    

    private async Task RefreshBrands() => brands = await APIService.GetBrands();
    private async Task RefreshProcessors() => processors = await APIService.GetProcessors();
    private async Task RefreshRAMs() => rams = await APIService.GetRAMs();
    private async Task RefreshHardDrives() => hardDrives = await APIService.GetStorages();
}
